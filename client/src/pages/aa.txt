import React, { useEffect, useState, useCallback, useMemo } from "react";
import { toast } from "react-hot-toast";
import { 
  Plus, Search, Filter, RefreshCw, FileDown, MoreVertical, X,
  User, Trash2, Eye, ChevronLeft, ChevronRight, ChevronsLeft, ChevronsRight,
  Mail, Phone, Calendar, BookOpen, GraduationCap, Building, Clock, MapPin,
  Award, TrendingUp, Users, DollarSign, Star, Settings, Download,
  Grid, List, SortAsc, SortDesc, ChevronDown, Filter as FilterIcon,
  UserCheck, UserX, Edit3, Copy, Share2, Archive, MoreHorizontal,
  Briefcase, Globe, Heart, MessageSquare, LinkedinIcon, TwitterIcon,
  Facebook, Instagram, Github, ExternalLink, Zap, Target, Activity
} from "lucide-react";

// Mock API functions (replace with your actual API)
const mockAPI = {
  getTeachers: async (params) => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 800));
    
    const mockTeachers = [
      {
        _id: "1",
        firstName: "Dr. Sarah",
        lastName: "Johnson",
        email: "sarah.johnson@university.edu",
        phone: "+1 (555) 123-4567",
        designation: "Professor",
        department: "dept1",
        faculty: "faculty1",
        qualification: "Ph.D. in Computer Science",
        specialization: "Machine Learning, AI",
        isActive: true,
        joiningDate: "2015-08-15",
        profilePhoto: "https://images.unsplash.com/photo-1494790108755-2616b612b786?w=150&h=150&fit=crop&crop=face",
        coursesTeaching: ["CS101", "CS401", "CS501"],
        officeHours: ["Mon 2-4 PM", "Wed 10-12 PM"],
        researchAreas: ["Machine Learning", "Natural Language Processing"],
        publications: 45,
        experience: 12,
        rating: 4.8,
        students: 120,
        salary: 95000,
        address: "123 University Ave, City, State 12345",
        website: "https://sarahjohnson.com",
        socialMedia: {
          linkedin: "https://linkedin.com/in/sarahjohnson",
          twitter: "https://twitter.com/sarahjohnson",
          github: "https://github.com/sarahjohnson"
        }
      },
      {
        _id: "2",
        firstName: "Prof. Michael",
        lastName: "Chen",
        email: "michael.chen@university.edu",
        phone: "+1 (555) 987-6543",
        designation: "Associate Professor",
        department: "dept2",
        faculty: "faculty1",
        qualification: "Ph.D. in Mathematics",
        specialization: "Applied Mathematics, Statistics",
        isActive: true,
        joiningDate: "2018-01-20",
        profilePhoto: "https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face",
        coursesTeaching: ["MATH201", "STAT301"],
        officeHours: ["Tue 1-3 PM", "Thu 3-5 PM"],
        researchAreas: ["Statistics", "Data Analysis"],
        publications: 28,
        experience: 8,
        rating: 4.6,
        students: 85,
        salary: 78000,
        address: "456 Campus Dr, City, State 12345",
        socialMedia: {
          linkedin: "https://linkedin.com/in/michaelchen"
        }
      },
      {
        _id: "3",
        firstName: "Dr. Emily",
        lastName: "Rodriguez",
        email: "emily.rodriguez@university.edu",
        phone: "+1 (555) 456-7890",
        designation: "Assistant Professor",
        department: "dept3",
        faculty: "faculty2",
        qualification: "Ph.D. in Biology",
        specialization: "Molecular Biology, Genetics",
        isActive: false,
        joiningDate: "2020-09-01",
        profilePhoto: "https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face",
        coursesTeaching: ["BIO101", "BIO301"],
        officeHours: ["Mon 10-12 PM"],
        researchAreas: ["Genetics", "Cell Biology"],
        publications: 15,
        experience: 4,
        rating: 4.9,
        students: 60,
        salary: 65000,
        address: "789 Research Blvd, City, State 12345"
      }
    ];

    return {
      data: mockTeachers,
      total: mockTeachers.length,
      page: 1,
      totalPages: 1
    };
  },
  
  getDepartments: async () => {
    await new Promise(resolve => setTimeout(resolve, 300));
    return {
      data: [
        { _id: "dept1", name: "Computer Science", code: "CS" },
        { _id: "dept2", name: "Mathematics", code: "MATH" },
        { _id: "dept3", name: "Biology", code: "BIO" }
      ]
    };
  },
  
  getFaculties: async () => {
    await new Promise(resolve => setTimeout(resolve, 300));
    return {
      data: [
        { _id: "faculty1", name: "Faculty of Science & Technology" },
        { _id: "faculty2", name: "Faculty of Life Sciences" }
      ]
    };
  }
};

// Enhanced status colors with more variations
const statusColors = {
  Active: "bg-emerald-100 text-emerald-800 border-emerald-200",
  Inactive: "bg-gray-100 text-gray-800 border-gray-200",
  OnLeave: "bg-yellow-100 text-yellow-800 border-yellow-200",
  Retired: "bg-blue-100 text-blue-800 border-blue-200"
};

const designationColors = {
  "Professor": "bg-purple-100 text-purple-800",
  "Associate Professor": "bg-blue-100 text-blue-800",
  "Assistant Professor": "bg-green-100 text-green-800",
  "Lecturer": "bg-orange-100 text-orange-800",
  "Visiting Faculty": "bg-gray-100 text-gray-800"
};

// Enhanced Faculty Management Component
export default function EnhancedFacultyManagement() {
  const [teachers, setTeachers] = useState([]);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(null);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [editingTeacher, setEditingTeacher] = useState(null);
  const [departments, setDepartments] = useState([]);
  const [faculties, setFaculties] = useState([]);
  const [selectedTeachers, setSelectedTeachers] = useState(new Set());
  
  // Enhanced UI states
  const [viewMode, setViewMode] = useState('table'); // 'table', 'grid', 'list'
  const [showFilters, setShowFilters] = useState(false);
  const [sortConfig, setSortConfig] = useState({ key: 'lastName', direction: 'asc' });
  const [quickStats, setQuickStats] = useState({});
  
  // Filter and pagination states
  const [searchTerm, setSearchTerm] = useState("");
  const [filters, setFilters] = useState({
    department: "",
    faculty: "",
    designation: "",
    status: "",
    experience: "",
    rating: ""
  });
  const [currentPage, setCurrentPage] = useState(1);
  const [pageSize, setPageSize] = useState(12);
  const [totalTeachers, setTotalTeachers] = useState(0);
  const [dropdownOpen, setDropdownOpen] = useState(null);

  // Fetch teachers and related data
  const fetchData = useCallback(async () => {
    try {
      setLoading(true);
      setError(null);
      
      const [deptsRes, facultiesRes, teachersRes] = await Promise.all([
        mockAPI.getDepartments(),
        mockAPI.getFaculties(),
        mockAPI.getTeachers({
          page: currentPage,
          limit: pageSize,
          search: searchTerm,
          ...filters
        })
      ]);

      setDepartments(deptsRes.data || []);
      setFaculties(facultiesRes.data || []);
      setTeachers(teachersRes.data || []);
      setTotalTeachers(teachersRes.total || 0);

      // Calculate quick stats
      const stats = {
        totalFaculty: teachersRes.data.length,
        activeFaculty: teachersRes.data.filter(t => t.isActive).length,
        avgRating: (teachersRes.data.reduce((acc, t) => acc + (t.rating || 0), 0) / teachersRes.data.length).toFixed(1),
        totalPublications: teachersRes.data.reduce((acc, t) => acc + (t.publications || 0), 0)
      };
      setQuickStats(stats);
      
    } catch (err) {
      setError("Failed to fetch data. Please try again later.");
      toast.error("Failed to fetch data");
    } finally {
      setLoading(false);
    }
  }, [currentPage, pageSize, searchTerm, filters]);

  const getNestedValue = (obj, path) => {
  return path.split('.').reduce((o, p) => o && o[p], obj) || '';
};

// Then keep the sortedTeachers memo as is
const sortedTeachers = useMemo(() => {
  if (!sortConfig.key) return teachers;

  return [...teachers].sort((a, b) => {
    const aValue = getNestedValue(a, sortConfig.key);
    const bValue = getNestedValue(b, sortConfig.key);

    if (aValue < bValue) return sortConfig.direction === 'asc' ? -1 : 1;
    if (aValue > bValue) return sortConfig.direction === 'asc' ? 1 : -1;
    return 0;
  });
}, [teachers, sortConfig]);


  const handleSort = (key) => {
    setSortConfig(prev => ({
      key,
      direction: prev.key === key && prev.direction === 'asc' ? 'desc' : 'asc'
    }));
  };

  // Enhanced handlers
  const handleBulkAction = (action) => {
    if (selectedTeachers.size === 0) {
      toast.error("Please select teachers first");
      return;
    }
    
    switch (action) {
      case 'activate':
        toast.success(`Activated ${selectedTeachers.size} teachers`);
        break;
      case 'deactivate':
        toast.success(`Deactivated ${selectedTeachers.size} teachers`);
        break;
      case 'delete':
        if (window.confirm(`Are you sure you want to delete ${selectedTeachers.size} teachers?`)) {
          toast.success(`Deleted ${selectedTeachers.size} teachers`);
        }
        break;
      case 'export':
        toast.success(`Exported ${selectedTeachers.size} teachers`);
        break;
    }
    setSelectedTeachers(new Set());
  };

  const toggleSelectAll = () => {
    if (selectedTeachers.size === teachers.length) {
      setSelectedTeachers(new Set());
    } else {
      setSelectedTeachers(new Set(teachers.map(t => t._id)));
    }
  };

  const toggleSelectTeacher = (id) => {
    const newSelected = new Set(selectedTeachers);
    if (newSelected.has(id)) {
      newSelected.delete(id);
    } else {
      newSelected.add(id);
    }
    setSelectedTeachers(newSelected);
  };

  // Utility functions
  const getDepartmentName = (departmentId) => {
    const dept = departments.find(d => d._id === departmentId);
    return dept ? dept.name : departmentId;
  };

  const getFacultyName = (facultyId) => {
    const faculty = faculties.find(f => f._id === facultyId);
    return faculty ? faculty.name : facultyId;
  };

  const getYearsOfService = (joiningDate) => {
    if (!joiningDate) return 0;
    const diff = new Date() - new Date(joiningDate);
    return Math.floor(diff / (1000 * 60 * 60 * 24 * 365.25));
  };

  const formatDate = (dateString) => {
    if (!dateString) return "—";
    return new Date(dateString).toLocaleDateString("en-US", {
      year: "numeric",
      month: "short",
      day: "numeric",
    });
  };

  const formatSalary = (salary) => {
    if (!salary) return "—";
    return new Intl.NumberFormat('en-US', {
      style: 'currency',
      currency: 'USD',
      minimumFractionDigits: 0
    }).format(salary);
  };

  // Effects
  useEffect(() => {
    const timer = setTimeout(() => {
      fetchData();
    }, 500);
    return () => clearTimeout(timer);
  }, [fetchData]);

  // Quick Stats Component
  const QuickStats = () => (
    <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
      <div className="bg-gradient-to-br from-blue-500 to-blue-600 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-blue-100 text-sm font-medium">Total Faculty</p>
            <p className="text-3xl font-bold">{quickStats.totalFaculty || 0}</p>
          </div>
          <Users className="h-8 w-8 text-blue-200" />
        </div>
        <div className="mt-4 flex items-center text-sm text-blue-100">
          <TrendingUp className="h-4 w-4 mr-1" />
          +12% from last month
        </div>
      </div>
      
      <div className="bg-gradient-to-br from-emerald-500 to-emerald-600 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-emerald-100 text-sm font-medium">Active Faculty</p>
            <p className="text-3xl font-bold">{quickStats.activeFaculty || 0}</p>
          </div>
          <UserCheck className="h-8 w-8 text-emerald-200" />
        </div>
        <div className="mt-4 flex items-center text-sm text-emerald-100">
          <Activity className="h-4 w-4 mr-1" />
          98% active rate
        </div>
      </div>
      
      <div className="bg-gradient-to-br from-purple-500 to-purple-600 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-purple-100 text-sm font-medium">Avg Rating</p>
            <p className="text-3xl font-bold">{quickStats.avgRating || '0.0'}</p>
          </div>
          <Star className="h-8 w-8 text-purple-200" />
        </div>
        <div className="mt-4 flex items-center text-sm text-purple-100">
          <Target className="h-4 w-4 mr-1" />
          Excellent performance
        </div>
      </div>
      
      <div className="bg-gradient-to-br from-orange-500 to-orange-600 rounded-xl p-6 text-white">
        <div className="flex items-center justify-between">
          <div>
            <p className="text-orange-100 text-sm font-medium">Publications</p>
            <p className="text-3xl font-bold">{quickStats.totalPublications || 0}</p>
          </div>
          <BookOpen className="h-8 w-8 text-orange-200" />
        </div>
        <div className="mt-4 flex items-center text-sm text-orange-100">
          <Zap className="h-4 w-4 mr-1" />
          Research excellence
        </div>
      </div>
    </div>
  );

  // Enhanced Filter Component
  const EnhancedFilters = () => (
    <div className={`bg-white rounded-xl shadow-sm border border-gray-200 transition-all duration-300 ${showFilters ? 'mb-6' : 'mb-6'}`}>
      <div className="p-6">
        <div className="flex items-center justify-between mb-4">
          <div className="flex items-center space-x-4">
            <button
              onClick={() => setShowFilters(!showFilters)}
              className="flex items-center space-x-2 px-4 py-2 bg-gray-50 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <FilterIcon className="h-4 w-4" />
              <span className="font-medium">Filters</span>
              <ChevronDown className={`h-4 w-4 transition-transform ${showFilters ? 'rotate-180' : ''}`} />
            </button>
            
            <div className="relative flex-1 max-w-md">
              <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 h-4 w-4 text-gray-400" />
              <input
                type="text"
                placeholder="Search faculty by name, email, or specialization..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="w-full pl-10 pr-4 py-2.5 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent transition-all"
              />
            </div>
          </div>
          
          <div className="flex items-center space-x-3">
            <div className="flex items-center space-x-2 bg-gray-50 rounded-lg p-1">
              <button
                onClick={() => setViewMode('table')}
                className={`p-2 rounded-md transition-colors ${viewMode === 'table' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'}`}
              >
                <List className="h-4 w-4" />
              </button>
              <button
                onClick={() => setViewMode('grid')}
                className={`p-2 rounded-md transition-colors ${viewMode === 'grid' ? 'bg-white shadow-sm' : 'hover:bg-gray-200'}`}
              >
                <Grid className="h-4 w-4" />
              </button>
            </div>
            
            <button
              onClick={() => fetchData()}
              className="flex items-center space-x-2 px-4 py-2 text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg transition-colors"
            >
              <RefreshCw className="h-4 w-4" />
              <span>Refresh</span>
            </button>
          </div>
        </div>

        {showFilters && (
          <div className="grid grid-cols-1 md:grid-cols-6 gap-4 pt-4 border-t border-gray-100">
            <select
              value={filters.department}
              onChange={(e) => setFilters(prev => ({ ...prev, department: e.target.value }))}
              className="px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">All Departments</option>
              {departments.map(dept => (
                <option key={dept._id} value={dept._id}>{dept.name}</option>
              ))}
            </select>

            <select
              value={filters.designation}
              onChange={(e) => setFilters(prev => ({ ...prev, designation: e.target.value }))}
              className="px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">All Designations</option>
              <option value="Professor">Professor</option>
              <option value="Associate Professor">Associate Professor</option>
              <option value="Assistant Professor">Assistant Professor</option>
              <option value="Lecturer">Lecturer</option>
            </select>

            <select
              value={filters.status}
              onChange={(e) => setFilters(prev => ({ ...prev, status: e.target.value }))}
              className="px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">All Status</option>
              <option value="active">Active</option>
              <option value="inactive">Inactive</option>
            </select>

            <select
              value={filters.experience}
              onChange={(e) => setFilters(prev => ({ ...prev, experience: e.target.value }))}
              className="px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">Experience</option>
              <option value="0-2">0-2 years</option>
              <option value="3-5">3-5 years</option>
              <option value="6-10">6-10 years</option>
              <option value="10+">10+ years</option>
            </select>

            <select
              value={filters.rating}
              onChange={(e) => setFilters(prev => ({ ...prev, rating: e.target.value }))}
              className="px-3 py-2 border border-gray-200 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value="">All Ratings</option>
              <option value="4.5+">4.5+ Stars</option>
              <option value="4.0+">4.0+ Stars</option>
              <option value="3.5+">3.5+ Stars</option>
            </select>

            <button
              onClick={() => {
                setSearchTerm('');
                setFilters({
                  department: "", faculty: "", designation: "", status: "", experience: "", rating: ""
                });
              }}
              className="px-4 py-2 text-gray-600 hover:text-gray-900 hover:bg-gray-50 rounded-lg transition-colors border border-gray-200"
            >
              Clear All
            </button>
          </div>
        )}
      </div>
    </div>
  );

  // Faculty Card Component for Grid View
  const FacultyCard = ({ teacher }) => (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 hover:shadow-lg transition-all duration-300 overflow-hidden">
      <div className="p-6">
        <div className="flex items-start justify-between mb-4">
          <div className="flex items-center space-x-3">
            <div className="relative">
              <img
                className="h-12 w-12 rounded-full object-cover"
                src={teacher.profilePhoto || `https://ui-avatars.com/api/?name=${teacher.firstName}+${teacher.lastName}&background=random`}
                alt={`${teacher.firstName} ${teacher.lastName}`}
              />
              <div className={`absolute -bottom-1 -right-1 h-4 w-4 rounded-full border-2 border-white ${teacher.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>
            </div>
            <div>
              <h3 className="text-lg font-semibold text-gray-900">
                {teacher.firstName} {teacher.lastName}
              </h3>
              <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium ${designationColors[teacher.designation] || 'bg-gray-100 text-gray-800'}`}>
                {teacher.designation}
              </span>
            </div>
          </div>
          
          <div className="relative">
            <button
              onClick={() => toggleDropdown(teacher._id)}
              className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
            >
              <MoreHorizontal className="h-4 w-4" />
            </button>
            
            {dropdownOpen === teacher._id && (
              <div className="absolute right-0 mt-2 w-48 bg-white rounded-lg shadow-lg border border-gray-200 z-10">
                <div className="py-1">
                  <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                    <Eye className="mr-2 h-4 w-4" />
                    View Profile
                  </button>
                  <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                    <Edit3 className="mr-2 h-4 w-4" />
                    Edit Details
                  </button>
                  <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                    <MessageSquare className="mr-2 h-4 w-4" />
                    Send Message
                  </button>
                  <hr className="my-1" />
                  <button className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center">
                    <Trash2 className="mr-2 h-4 w-4" />
                    Delete
                  </button>
                </div>
              </div>
            )}
          </div>
        </div>

        <div className="space-y-3 mb-4">
          <div className="flex items-center text-sm text-gray-600">
            <Building className="h-4 w-4 mr-2 text-gray-400" />
            {getDepartmentName(teacher.department)}
          </div>
          <div className="flex items-center text-sm text-gray-600">
            <Mail className="h-4 w-4 mr-2 text-gray-400" />
            {teacher.email}
          </div>
          <div className="flex items-center text-sm text-gray-600">
            <Award className="h-4 w-4 mr-2 text-gray-400" />
            {teacher.qualification}
          </div>
        </div>

        <div className="grid grid-cols-3 gap-4 mb-4 py-3 bg-gray-50 rounded-lg">
          <div className="text-center">
            <p className="text-lg font-bold text-gray-900">{teacher.rating}</p>
            <p className="text-xs text-gray-500">Rating</p>
          </div>
          <div className="text-center">
            <p className="text-lg font-bold text-gray-900">{teacher.students}</p>
            <p className="text-xs text-gray-500">Students</p>
          </div>
          <div className="text-center">
            <p className="text-lg font-bold text-gray-900">{teacher.publications}</p>
            <p className="text-xs text-gray-500">Papers</p>
          </div>
        </div>

        <div className="flex items-center justify-between">
          <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${statusColors[teacher.isActive ? 'Active' : 'Inactive']}`}>
            {teacher.isActive ? 'Active' : 'Inactive'}
          </span>
          
          <div className="flex items-center space-x-2">
            {teacher.socialMedia?.linkedin && (
              <a href={teacher.socialMedia.linkedin} className="text-gray-400 hover:text-blue-600">
                <LinkedinIcon className="h-4 w-4" />
              </a>
            )}
            {teacher.socialMedia?.twitter && (
              <a href={teacher.socialMedia.twitter} className="text-gray-400 hover:text-blue-400">
                <TwitterIcon className="h-4 w-4" />
              </a>
            )}
            {teacher.website && (
              <a href={teacher.website} className="text-gray-400 hover:text-green-600">
                <ExternalLink className="h-4 w-4" />
              </a>
            )}
          </div>
        </div>
      </div>
    </div>
  );

  // Enhanced Table View
  const TableView = () => (
    <div className="bg-white rounded-xl shadow-sm border border-gray-200 overflow-hidden">
      <div className="px-6 py-4 border-b border-gray-200">
        <div className="flex items-center justify-between">
          <div>
            <h3 className="text-lg font-semibold text-gray-900">Faculty Directory</h3>
            <p className="text-sm text-gray-600">
              {totalTeachers > 0 ? `${totalTeachers} faculty members` : 'No faculty members found'}
            </p>
          </div>
          
          <div className="flex items-center space-x-3">
            {selectedTeachers.size > 0 && (
              <div className="flex items-center space-x-2">
                <span className="text-sm text-gray-600">{selectedTeachers.size} selected</span>
                <div className="flex items-center space-x-1">
                  <button
                    onClick={() => handleBulkAction('activate')}
                    className="p-2 text-green-600 hover:bg-green-50 rounded-lg"
                    title="Activate Selected"
                  >
                    <UserCheck className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleBulkAction('deactivate')}
                    className="p-2 text-gray-600 hover:bg-gray-50 rounded-lg"
                    title="Deactivate Selected"
                  >
                    <UserX className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleBulkAction('export')}
                    className="p-2 text-blue-600 hover:bg-blue-50 rounded-lg"
                    title="Export Selected"
                  >
                    <Download className="h-4 w-4" />
                  </button>
                  <button
                    onClick={() => handleBulkAction('delete')}
                    className="p-2 text-red-600 hover:bg-red-50 rounded-lg"
                    title="Delete Selected"
                  >
                    <Trash2 className="h-4 w-4" />
                  </button>
                </div>
              </div>
            )}
            
            <select
              value={pageSize}
              onChange={(e) => setPageSize(Number(e.target.value))}
              className="px-3 py-2 border border-gray-200 rounded-lg text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent"
            >
              <option value={12}>12 per page</option>
              <option value={24}>24 per page</option>
              <option value={48}>48 per page</option>
            </select>
            
            <button className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
              <Plus className="h-4 w-4" />
              <span>Add Faculty</span>
            </button>
          </div>
        </div>
      </div>

      <div className="overflow-x-auto">
        <table className="min-w-full">
          <thead className="bg-gray-50">
            <tr>
              <th className="px-6 py-3 text-left">
                <input
                  type="checkbox"
                  checked={selectedTeachers.size === teachers.length && teachers.length > 0}
                  onChange={toggleSelectAll}
                  className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                />
              </th>
              <th 
                onClick={() => handleSort('lastName')}
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
              >
                <div className="flex items-center space-x-1">
                  <span>Faculty</span>
                  {sortConfig.key === 'lastName' && (
                    sortConfig.direction === 'asc' ? <SortAsc className="h-3 w-3" /> : <SortDesc className="h-3 w-3" />
                  )}
                </div>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Department & Qualification
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Contact & Location
              </th>
              <th 
                onClick={() => handleSort('rating')}
                className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider cursor-pointer hover:bg-gray-100"
              >
                <div className="flex items-center space-x-1">
                  <span>Performance</span>
                  {sortConfig.key === 'rating' && (
                    sortConfig.direction === 'asc' ? <SortAsc className="h-3 w-3" /> : <SortDesc className="h-3 w-3" />
                  )}
                </div>
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Teaching Load
              </th>
              <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                Status
              </th>
              <th className="px-6 py-3 text-right text-xs font-medium text-gray-500 uppercase tracking-wider">
                Actions
              </th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {loading ? (
              Array.from({ length: 5 }).map((_, i) => (
                <tr key={i}>
                  <td className="px-6 py-4">
                    <div className="h-4 w-4 bg-gray-200 rounded animate-pulse"></div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center space-x-3">
                      <div className="h-10 w-10 bg-gray-200 rounded-full animate-pulse"></div>
                      <div className="space-y-2">
                        <div className="h-4 w-32 bg-gray-200 rounded animate-pulse"></div>
                        <div className="h-3 w-24 bg-gray-200 rounded animate-pulse"></div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4 space-y-2">
                    <div className="h-4 w-28 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-3 w-36 bg-gray-200 rounded animate-pulse"></div>
                  </td>
                  <td className="px-6 py-4 space-y-2">
                    <div className="h-4 w-40 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-3 w-32 bg-gray-200 rounded animate-pulse"></div>
                  </td>
                  <td className="px-6 py-4 space-y-2">
                    <div className="h-4 w-16 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-3 w-20 bg-gray-200 rounded animate-pulse"></div>
                  </td>
                  <td className="px-6 py-4 space-y-2">
                    <div className="h-4 w-20 bg-gray-200 rounded animate-pulse"></div>
                    <div className="h-3 w-24 bg-gray-200 rounded animate-pulse"></div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="h-6 w-16 bg-gray-200 rounded-full animate-pulse"></div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="h-8 w-8 bg-gray-200 rounded animate-pulse ml-auto"></div>
                  </td>
                </tr>
              ))
            ) : sortedTeachers.length === 0 ? (
              <tr>
                <td colSpan={8} className="px-6 py-12 text-center">
                  <div className="flex flex-col items-center space-y-3">
                    <Users className="h-12 w-12 text-gray-400" />
                    <p className="text-gray-500 text-lg">No faculty members found</p>
                    <p className="text-gray-400 text-sm">Try adjusting your search criteria or add new faculty members</p>
                    <button className="mt-4 flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                      <Plus className="h-4 w-4" />
                      <span>Add Faculty</span>
                    </button>
                  </div>
                </td>
              </tr>
            ) : (
              sortedTeachers.map((teacher) => (
                <tr key={teacher._id} className="hover:bg-gray-50 transition-colors">
                  <td className="px-6 py-4">
                    <input
                      type="checkbox"
                      checked={selectedTeachers.has(teacher._id)}
                      onChange={() => toggleSelectTeacher(teacher._id)}
                      className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                    />
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center space-x-3">
                      <div className="relative flex-shrink-0">
                        <img
                          className="h-10 w-10 rounded-full object-cover"
                          src={teacher.profilePhoto || `https://ui-avatars.com/api/?name=${teacher.firstName}+${teacher.lastName}&background=random`}
                          alt={`${teacher.firstName} ${teacher.lastName}`}
                        />
                        <div className={`absolute -bottom-0.5 -right-0.5 h-3 w-3 rounded-full border-2 border-white ${teacher.isActive ? 'bg-green-500' : 'bg-gray-400'}`}></div>
                      </div>
                      <div>
                        <div className="text-sm font-medium text-gray-900">
                          {teacher.firstName} {teacher.lastName}
                        </div>
                        <div className="flex items-center space-x-2">
                          <span className={`inline-flex items-center px-2 py-0.5 rounded text-xs font-medium ${designationColors[teacher.designation] || 'bg-gray-100 text-gray-800'}`}>
                            {teacher.designation}
                          </span>
                          {teacher.socialMedia?.linkedin && (
                            <a href={teacher.socialMedia.linkedin} className="text-blue-600 hover:text-blue-800">
                              <LinkedinIcon className="h-3 w-3" />
                            </a>
                          )}
                        </div>
                      </div>
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-900 flex items-center">
                      <Building className="h-3.5 w-3.5 mr-1.5 text-gray-400" />
                      {getDepartmentName(teacher.department)}
                    </div>
                    <div className="text-sm text-gray-500 flex items-center mt-1">
                      <GraduationCap className="h-3.5 w-3.5 mr-1.5 text-gray-400" />
                      {teacher.qualification}
                    </div>
                    <div className="text-xs text-gray-400 mt-1">
                      {teacher.specialization}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-900 flex items-center">
                      <Mail className="h-3.5 w-3.5 mr-1.5 text-gray-400" />
                      {teacher.email}
                    </div>
                    <div className="text-sm text-gray-500 flex items-center mt-1">
                      <Phone className="h-3.5 w-3.5 mr-1.5 text-gray-400" />
                      {teacher.phone || "Not provided"}
                    </div>
                    {teacher.address && (
                      <div className="text-xs text-gray-400 flex items-center mt-1">
                        <MapPin className="h-3 w-3 mr-1" />
                        {teacher.address.split(',')[0]}...
                      </div>
                    )}
                  </td>
                  <td className="px-6 py-4">
                    <div className="flex items-center space-x-2">
                      <div className="flex items-center">
                        <Star className="h-4 w-4 text-yellow-400 fill-current" />
                        <span className="ml-1 text-sm font-medium">{teacher.rating}</span>
                      </div>
                    </div>
                    <div className="text-xs text-gray-500 mt-1">
                      {teacher.publications} publications
                    </div>
                    <div className="text-xs text-gray-400">
                      {getYearsOfService(teacher.joiningDate)} years experience
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <div className="text-sm text-gray-900 flex items-center">
                      <BookOpen className="h-3.5 w-3.5 mr-1.5 text-gray-400" />
                      {teacher.coursesTeaching?.length || 0} courses
                    </div>
                    <div className="text-sm text-gray-500 flex items-center mt-1">
                      <Users className="h-3.5 w-3.5 mr-1.5 text-gray-400" />
                      {teacher.students} students
                    </div>
                    <div className="text-xs text-gray-400 mt-1">
                      {formatSalary(teacher.salary)}
                    </div>
                  </td>
                  <td className="px-6 py-4">
                    <span className={`inline-flex items-center px-2.5 py-0.5 rounded-full text-xs font-medium border ${statusColors[teacher.isActive ? 'Active' : 'Inactive']}`}>
                      {teacher.isActive ? 'Active' : 'Inactive'}
                    </span>
                    <div className="text-xs text-gray-500 mt-1 flex items-center">
                      <Calendar className="h-3 w-3 mr-1" />
                      Since {formatDate(teacher.joiningDate)}
                    </div>
                  </td>
                  <td className="px-6 py-4 text-right">
                    <div className="relative">
                      <button
                        onClick={() => toggleDropdown(teacher._id)}
                        className="p-2 hover:bg-gray-100 rounded-lg transition-colors"
                      >
                        <MoreVertical className="h-4 w-4" />
                      </button>
                      
                      {dropdownOpen === teacher._id && (
                        <div className="absolute right-0 mt-2 w-56 bg-white rounded-lg shadow-lg border border-gray-200 z-20">
                          <div className="py-1">
                            <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                              <Eye className="mr-3 h-4 w-4" />
                              View Full Profile
                            </button>
                            <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                              <Edit3 className="mr-3 h-4 w-4" />
                              Edit Information
                            </button>
                            <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                              <MessageSquare className="mr-3 h-4 w-4" />
                              Send Message
                            </button>
                            <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                              <Copy className="mr-3 h-4 w-4" />
                              Duplicate Profile
                            </button>
                            <hr className="my-1" />
                            <button className="w-full text-left px-4 py-2 text-sm text-gray-700 hover:bg-gray-50 flex items-center">
                              <Share2 className="mr-3 h-4 w-4" />
                              Share Profile
                            </button>
                            <button className="w-full text-left px-4 py-2 text-sm text-orange-600 hover:bg-orange-50 flex items-center">
                              <Archive className="mr-3 h-4 w-4" />
                              Archive
                            </button>
                            <button className="w-full text-left px-4 py-2 text-sm text-red-600 hover:bg-red-50 flex items-center">
                              <Trash2 className="mr-3 h-4 w-4" />
                              Delete
                            </button>
                          </div>
                        </div>
                      )}
                    </div>
                  </td>
                </tr>
              ))
            )}
          </tbody>
        </table>
      </div>
    </div>
  );

  // Enhanced Pagination
  const EnhancedPagination = () => {
    const totalPages = Math.ceil(totalTeachers / pageSize);
    const startItem = (currentPage - 1) * pageSize + 1;
    const endItem = Math.min(currentPage * pageSize, totalTeachers);

    const getPaginationRange = () => {
      const range = [];
      const maxVisiblePages = 7;
      
      if (totalPages <= maxVisiblePages) {
        for (let i = 1; i <= totalPages; i++) {
          range.push(i);
        }
      } else {
        const half = Math.floor(maxVisiblePages / 2);
        let start = currentPage - half;
        let end = currentPage + half;
        
        if (start < 1) {
          start = 1;
          end = maxVisiblePages;
        }
        
        if (end > totalPages) {
          end = totalPages;
          start = totalPages - maxVisiblePages + 1;
        }
        
        for (let i = start; i <= end; i++) {
          range.push(i);
        }
      }
      
      return range;
    };

    if (totalPages <= 1) return null;

    return (
      <div className="bg-white px-6 py-4 border-t border-gray-200 rounded-b-xl">
        <div className="flex items-center justify-between">
          <div className="flex items-center text-sm text-gray-700">
            <span>
              Showing <span className="font-medium">{startItem}</span> to <span className="font-medium">{endItem}</span> of{' '}
              <span className="font-medium">{totalTeachers}</span> faculty members
            </span>
          </div>
          
          <div className="flex items-center space-x-2">
            <button
              onClick={() => setCurrentPage(1)}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-l-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronsLeft className="h-4 w-4" />
            </button>
            
            <button
              onClick={() => setCurrentPage(Math.max(1, currentPage - 1))}
              disabled={currentPage === 1}
              className="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border-t border-b border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronLeft className="h-4 w-4" />
            </button>
            
            {getPaginationRange().map((page, index) => (
              <button
                key={page}
                onClick={() => setCurrentPage(page)}
                className={`relative inline-flex items-center px-4 py-2 text-sm font-medium border-t border-b border-gray-300 transition-colors ${
                  currentPage === page
                    ? 'z-10 bg-blue-50 border-blue-500 text-blue-600'
                    : 'text-gray-700 bg-white hover:bg-gray-50'
                }`}
              >
                {page}
              </button>
            ))}
            
            <button
              onClick={() => setCurrentPage(Math.min(totalPages, currentPage + 1))}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border-t border-b border-gray-300 hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronRight className="h-4 w-4" />
            </button>
            
            <button
              onClick={() => setCurrentPage(totalPages)}
              disabled={currentPage === totalPages}
              className="relative inline-flex items-center px-3 py-2 text-sm font-medium text-gray-500 bg-white border border-gray-300 rounded-r-lg hover:bg-gray-50 disabled:opacity-50 disabled:cursor-not-allowed"
            >
              <ChevronsRight className="h-4 w-4" />
            </button>
          </div>
        </div>
      </div>
    );
  };

  // Main Render
  return (
    <div className="min-h-screen bg-gradient-to-br from-slate-50 via-blue-50 to-indigo-50">
      {/* Enhanced Header */}
      <div className="bg-white/80 backdrop-blur-sm border-b border-gray-200/50 sticky top-0 z-30">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-6">
          <div className="flex flex-col lg:flex-row lg:items-center lg:justify-between">
            <div>
              <div className="flex items-center space-x-3">
                <div className="p-2 bg-gradient-to-r from-blue-600 to-indigo-600 rounded-lg">
                  <GraduationCap className="h-6 w-6 text-white" />
                </div>
                <div>
                  <h1 className="text-3xl font-bold bg-gradient-to-r from-gray-900 to-gray-600 bg-clip-text text-transparent">
                    Faculty Management
                  </h1>
                  <p className="mt-1 text-sm text-gray-600">
                    Comprehensive faculty directory with advanced management tools
                  </p>
                </div>
              </div>
            </div>
            
            <div className="mt-6 lg:mt-0 flex flex-wrap items-center gap-3">
              <button className="flex items-center space-x-2 px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 shadow-sm transition-all">
                <FileDown className="h-4 w-4" />
                <span>Export Data</span>
              </button>
              
              <button className="flex items-center space-x-2 px-4 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 shadow-sm transition-all">
                <Settings className="h-4 w-4" />
                <span>Settings</span>
              </button>
              
              <button
                onClick={() => setIsModalOpen(true)}
                className="flex items-center space-x-2 px-6 py-2 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-0.5"
              >
                <Plus className="h-4 w-4" />
                <span>Add Faculty</span>
              </button>
            </div>
          </div>
        </div>
      </div>

      {/* Main Content */}
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <QuickStats />
        <EnhancedFilters />
        
        {viewMode === 'table' ? (
          <>
            <TableView />
            <EnhancedPagination />
          </>
        ) : (
          <>
            <div className="grid grid-cols-1 md:grid-cols-2 xl:grid-cols-3 gap-6">
              {loading ? (
                Array.from({ length: 6 }).map((_, i) => (
                  <div key={i} className="bg-white rounded-xl p-6 animate-pulse">
                    <div className="flex items-center space-x-3 mb-4">
                      <div className="h-12 w-12 bg-gray-200 rounded-full"></div>
                      <div className="space-y-2">
                        <div className="h-4 w-32 bg-gray-200 rounded"></div>
                        <div className="h-3 w-24 bg-gray-200 rounded"></div>
                      </div>
                    </div>
                    <div className="space-y-3">
                      <div className="h-3 w-full bg-gray-200 rounded"></div>
                      <div className="h-3 w-3/4 bg-gray-200 rounded"></div>
                      <div className="h-3 w-1/2 bg-gray-200 rounded"></div>
                    </div>
                  </div>
                ))
              ) : sortedTeachers.length === 0 ? (
                <div className="col-span-full flex flex-col items-center justify-center py-16 text-center">
                  <Users className="h-16 w-16 text-gray-400 mb-4" />
                  <h3 className="text-lg font-medium text-gray-900 mb-2">No Faculty Found</h3>
                  <p className="text-gray-500 mb-6">Try adjusting your search criteria or add new faculty members</p>
                  <button className="flex items-center space-x-2 px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
                    <Plus className="h-4 w-4" />
                    <span>Add First Faculty</span>
                  </button>
                </div>
              ) : (
                sortedTeachers.map((teacher) => (
                  <FacultyCard key={teacher._id} teacher={teacher} />
                ))
              )}
            </div>
            {viewMode === 'grid' && <EnhancedPagination />}
          </>
        )}
      </div>

      {/* Click outside to close dropdowns */}
      {dropdownOpen && (
        <div
          className="fixed inset-0 z-10"
          onClick={() => setDropdownOpen(null)}
        />
      )}
    </div>
  );
}